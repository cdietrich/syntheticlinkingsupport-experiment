/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfsInterfaceParserRuleCall_0_0 = (RuleCall)cIfsAssignment_0.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//Model:
		//    ifs+=Interface*
		//    specs+=Spec*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ifs+=Interface*
		//specs+=Spec*
		public Group getGroup() { return cGroup; }
		
		//ifs+=Interface*
		public Assignment getIfsAssignment_0() { return cIfsAssignment_0; }
		
		//Interface
		public RuleCall getIfsInterfaceParserRuleCall_0_0() { return cIfsInterfaceParserRuleCall_0_0; }
		
		//specs+=Spec*
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }
		
		//Spec
		public RuleCall getSpecsSpecParserRuleCall_1_0() { return cSpecsSpecParserRuleCall_1_0; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Interface:
		//    'interface' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpecKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartPartParserRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		//Spec:
		//    {Spec} 'spec' part=Part
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Spec} 'spec' part=Part
		public Group getGroup() { return cGroup; }
		
		//{Spec}
		public Action getSpecAction_0() { return cSpecAction_0; }
		
		//'spec'
		public Keyword getSpecKeyword_1() { return cSpecKeyword_1; }
		
		//part=Part
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//Part
		public RuleCall getPartPartParserRuleCall_2_0() { return cPartPartParserRuleCall_2_0; }
	}
	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInterfacesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cInterfacesInterfaceCrossReference_1_0_0 = (CrossReference)cInterfacesAssignment_1_0.eContents().get(0);
		private final RuleCall cInterfacesInterfaceIDTerminalRuleCall_1_0_0_1 = (RuleCall)cInterfacesInterfaceCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInterfacesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cInterfacesInterfaceCrossReference_1_1_1_0 = (CrossReference)cInterfacesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cInterfacesInterfaceIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cInterfacesInterfaceCrossReference_1_1_1_0.eContents().get(1);
		
		//Part:
		//    name=ID (interfaces+=[Interface] (',' interfaces+=[Interface])*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (interfaces+=[Interface] (',' interfaces+=[Interface])*)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(interfaces+=[Interface] (',' interfaces+=[Interface])*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//interfaces+=[Interface]
		public Assignment getInterfacesAssignment_1_0() { return cInterfacesAssignment_1_0; }
		
		//[Interface]
		public CrossReference getInterfacesInterfaceCrossReference_1_0_0() { return cInterfacesInterfaceCrossReference_1_0_0; }
		
		//ID
		public RuleCall getInterfacesInterfaceIDTerminalRuleCall_1_0_0_1() { return cInterfacesInterfaceIDTerminalRuleCall_1_0_0_1; }
		
		//(',' interfaces+=[Interface])*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//interfaces+=[Interface]
		public Assignment getInterfacesAssignment_1_1_1() { return cInterfacesAssignment_1_1_1; }
		
		//[Interface]
		public CrossReference getInterfacesInterfaceCrossReference_1_1_1_0() { return cInterfacesInterfaceCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getInterfacesInterfaceIDTerminalRuleCall_1_1_1_0_1() { return cInterfacesInterfaceIDTerminalRuleCall_1_1_1_0_1; }
	}
	public class Spec2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Spec2");
		private final Assignment cUsedInterfacesAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cUsedInterfacesInterfaceCrossReference_0 = (CrossReference)cUsedInterfacesAssignment.eContents().get(0);
		private final RuleCall cUsedInterfacesInterfaceIDTerminalRuleCall_0_1 = (RuleCall)cUsedInterfacesInterfaceCrossReference_0.eContents().get(1);
		
		//// hack to fix metamodel
		//Spec2 returns Spec:
		//    usedInterfaces+=[Interface]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//usedInterfaces+=[Interface]
		public Assignment getUsedInterfacesAssignment() { return cUsedInterfacesAssignment; }
		
		//[Interface]
		public CrossReference getUsedInterfacesInterfaceCrossReference_0() { return cUsedInterfacesInterfaceCrossReference_0; }
		
		//ID
		public RuleCall getUsedInterfacesInterfaceIDTerminalRuleCall_0_1() { return cUsedInterfacesInterfaceIDTerminalRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final InterfaceElements pInterface;
	private final SpecElements pSpec;
	private final PartElements pPart;
	private final Spec2Elements pSpec2;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInterface = new InterfaceElements();
		this.pSpec = new SpecElements();
		this.pPart = new PartElements();
		this.pSpec2 = new Spec2Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ifs+=Interface*
	//    specs+=Spec*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Interface:
	//    'interface' name=ID
	//;
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Spec:
	//    {Spec} 'spec' part=Part
	//;
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}
	
	//Part:
	//    name=ID (interfaces+=[Interface] (',' interfaces+=[Interface])*)?
	//;
	public PartElements getPartAccess() {
		return pPart;
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}
	
	//// hack to fix metamodel
	//Spec2 returns Spec:
	//    usedInterfaces+=[Interface]
	//;
	public Spec2Elements getSpec2Access() {
		return pSpec2;
	}
	
	public ParserRule getSpec2Rule() {
		return getSpec2Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
