/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterface
entryRuleInterface
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInterfaceAccess().getGroup()); }
		(rule__Interface__Group__0)
		{ after(grammarAccess.getInterfaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpec
entryRuleSpec
:
{ before(grammarAccess.getSpecRule()); }
	 ruleSpec
{ after(grammarAccess.getSpecRule()); } 
	 EOF 
;

// Rule Spec
ruleSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecAccess().getGroup()); }
		(rule__Spec__Group__0)
		{ after(grammarAccess.getSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePart
entryRulePart
:
{ before(grammarAccess.getPartRule()); }
	 rulePart
{ after(grammarAccess.getPartRule()); } 
	 EOF 
;

// Rule Part
rulePart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPartAccess().getGroup()); }
		(rule__Part__Group__0)
		{ after(grammarAccess.getPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getIfsAssignment_0()); }
	(rule__Model__IfsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getIfsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSpecsAssignment_1()); }
	(rule__Model__SpecsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getSpecsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
	'interface'
	{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interface__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
	(rule__Interface__NameAssignment_1)
	{ after(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Spec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__0__Impl
	rule__Spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getSpecAction_0()); }
	()
	{ after(grammarAccess.getSpecAccess().getSpecAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__1__Impl
	rule__Spec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getSpecKeyword_1()); }
	'spec'
	{ after(grammarAccess.getSpecAccess().getSpecKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Spec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecAccess().getPartAssignment_2()); }
	(rule__Spec__PartAssignment_2)
	{ after(grammarAccess.getSpecAccess().getPartAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Part__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group__0__Impl
	rule__Part__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getNameAssignment_0()); }
	(rule__Part__NameAssignment_0)
	{ after(grammarAccess.getPartAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getGroup_1()); }
	(rule__Part__Group_1__0)?
	{ after(grammarAccess.getPartAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Part__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group_1__0__Impl
	rule__Part__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getInterfacesAssignment_1_0()); }
	(rule__Part__InterfacesAssignment_1_0)
	{ after(grammarAccess.getPartAccess().getInterfacesAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getGroup_1_1()); }
	(rule__Part__Group_1_1__0)*
	{ after(grammarAccess.getPartAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Part__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group_1_1__0__Impl
	rule__Part__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getPartAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Part__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartAccess().getInterfacesAssignment_1_1_1()); }
	(rule__Part__InterfacesAssignment_1_1_1)
	{ after(grammarAccess.getPartAccess().getInterfacesAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__IfsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getIfsInterfaceParserRuleCall_0_0()); }
		ruleInterface
		{ after(grammarAccess.getModelAccess().getIfsInterfaceParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SpecsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSpecsSpecParserRuleCall_1_0()); }
		ruleSpec
		{ after(grammarAccess.getModelAccess().getSpecsSpecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Spec__PartAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecAccess().getPartPartParserRuleCall_2_0()); }
		rulePart
		{ after(grammarAccess.getSpecAccess().getPartPartParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getPartAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__InterfacesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartAccess().getInterfacesInterfaceCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getPartAccess().getInterfacesInterfaceIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPartAccess().getInterfacesInterfaceIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getPartAccess().getInterfacesInterfaceCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Part__InterfacesAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartAccess().getInterfacesInterfaceCrossReference_1_1_1_0()); }
		(
			{ before(grammarAccess.getPartAccess().getInterfacesInterfaceIDTerminalRuleCall_1_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPartAccess().getInterfacesInterfaceIDTerminalRuleCall_1_1_1_0_1()); }
		)
		{ after(grammarAccess.getPartAccess().getInterfacesInterfaceCrossReference_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
